name: Run Setup
# This action can be run on-demand against a branch.
# It attempts to auto-fix some errors in the most recently updated sample in the branch:
#    Builds main.bicep -> azuredeploy.json
#    Attempts some fixes with the metadata

# To run/debug locally, try https://github.com/nektos/act
# Actions documentation: https://docs.github.com/en/actions/reference

on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main
    workflow_dispatch:

permissions:
  contents: read

jobs:
  check-if-external:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: set-environment
        with:
          script: |
            const actionInitiator = context.payload.sender.login;
            const org = "Azure-Samples";
            let isPublicMember = true;

            // Check if initiator is a public member of the org
            try {
              await github.rest.orgs.checkPublicMembershipForUser({
                org,
                username: actionInitiator
              });
            } catch (error) {
              if (error.status != 404) {
                throw new Error("Unknown error", {cause: error});
              }

              console.debug([
                `User is not a public member of the organization "${org}"`,
                "",
                `If you are a Microsoft employee, you can join the "${org}" org and set your org membership visibility to public: https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-your-membership-in-organizations/publicizing-or-hiding-organization-membership#changing-the-visibility-of-your-organization-membership`
              ].join("\n"));

              isPublicMember = false;
            }


            const isPullRequestEvent = ["pull_request", "pull_request_target"].includes(context.eventName);

            if (!(isPublicMember && isPullRequestEvent)) {
              return "external-contribution";
            }
            return "";
          result-encoding: string
  main:
    permissions:
      contents: write # for git push
    name: Run Setup
    runs-on: ubuntu-latest

    env:
      # don't print dotnet logo
      DOTNET_NOLOGO: true

      # disable telemetry (reduces dotnet tool output in logs)
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.8.0

      - name: Install Bicep
        run: |
          # See https://github.com/Azure/bicep/blob/main/docs/installing.md#windows-installer

          # Create the install folder
          INSTALL_PATH="$RUNNER_TEMP/bicep"
          BICEP_PATH="$RUNNER_TEMP/bicep/bicep"
          mkdir -p $INSTALL_PATH

          # Fetch the latest Bicep CLI binary
          curl -sLo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep $INSTALL_PATH
          echo Using bicep at $BICEP_PATH:
          $BICEP_PATH --version

          echo "BICEP_PATH=$BICEP_PATH" >> $GITHUB_ENV

      - name: Install PowerShell
        run: |
          # Update the list of packages
          sudo apt-get update
          # Install pre-requisite packages.
          sudo apt-get install -y wget apt-transport-https software-properties-common
          # Download the Microsoft repository GPG keys
          wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
          # Register the Microsoft repository GPG keys
          sudo dpkg -i packages-microsoft-prod.deb
          # Update the list of packages after we added packages.microsoft.com
          sudo apt-get update
          # Install PowerShell
          sudo apt-get install -y powershell

      - name: Sync main
        uses: actions/checkout@v2.3.4
        with:
          ref: main
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - name: Find setup folder
        run: |
            git status
            pwd
            cd $GITHUB_WORKSPACE
            pwd

            # Find all setup folders
            SETUP_FOLDERS=$(find . -type d -name "setup")

            if [ -z "$SETUP_FOLDERS" ]; then
            echo "No setup folders found."
            exit 1
            fi

            echo "Scanning setup folders for Bicep files..."

            for SETUP_FOLDER in $SETUP_FOLDERS; do
            echo "Checking folder: $SETUP_FOLDER"

            TESTFOLDER_PATH=$SETUP_FOLDER
            FOUNDFOLDER_PATH=

            while [ "$TESTFOLDER_PATH" != "." ]; do
                echo "Looking for main template in $TESTFOLDER_PATH"

                MAINBICEP_PATH="$TESTFOLDER_PATH/main.bicep"
                AZDEPLOYJSON_PATH="$TESTFOLDER_PATH/azuredeploy.json"

                if [ -f "$MAINBICEP_PATH" ] || [ -f "$AZDEPLOYJSON_PATH" ]; then
                FOUNDFOLDER_PATH=$TESTFOLDER_PATH
                echo "Found main template in $FOUNDFOLDER_PATH"

                echo "SAMPLEFOLDER_PATH=$FOUNDFOLDER_PATH" >> $GITHUB_ENV
                echo "MAINBICEP_PATH=$MAINBICEP_PATH" >> $GITHUB_ENV
                echo "AZDEPLOYJSON_PATH=$AZDEPLOYJSON_PATH" >> $GITHUB_ENV

                break
                fi

                TESTFOLDER_PATH=$(dirname "$TESTFOLDER_PATH")
            done

            if [ -z "$FOUNDFOLDER_PATH" ]; then
                echo "Could not find main.bicep or azuredeploy.json in folder or parents of $SETUP_FOLDER" 1>&2
                exit 1
            fi
            done

            echo "SAMPLEFOLDER_PATH=$FOUNDFOLDER_PATH" >> $GITHUB_ENV
            echo "MAINBICEP_PATH=$MAINBICEP_PATH" >> $GITHUB_ENV
            echo "AZDEPLOYJSON_PATH=$AZDEPLOYJSON_PATH" >> $GITHUB_ENV

      - name: Build main.bicep -> azuredeploy.json
        run: |
          if [ -f $MAINBICEP_PATH ]; then
            echo Running: bicep build $MAINBICEP_PATH --outfile $AZDEPLOYJSON_PATH
            $BICEP_PATH build $MAINBICEP_PATH --outfile $AZDEPLOYJSON_PATH
          fi

      - name: Commit changes
        if: always()
        run: |
          git config --global user.email "azureai-samples@noreply.github.com"
          git config --global user.name "azureai-sample Automation"

          git add $SAMPLEFOLDER_PATH

          if ! git diff-index --quiet HEAD --; then
            git commit -m "Automatic fixes"
            git push
          fi
