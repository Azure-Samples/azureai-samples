{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "13967412167285246353"
    }
  },
  "parameters": {
    "aiHubName": {
      "type": "string",
      "defaultValue": "hub-demo",
      "minLength": 2,
      "maxLength": 12,
      "metadata": {
        "description": "Name for your Azure AI Hub resource."
      }
    },
    "aiHubFriendlyName": {
      "type": "string",
      "defaultValue": "Agents Hub resource",
      "metadata": {
        "description": "Friendly name for your Hub resource"
      }
    },
    "aiHubDescription": {
      "type": "string",
      "defaultValue": "This is an example AI Hub resource for use in Azure AI Studio.",
      "metadata": {
        "description": "Creating an Azure AI Hub to set up your app environment and Azure resources."
      }
    },
    "aiProjectName": {
      "type": "string",
      "defaultValue": "project-demo",
      "metadata": {
        "description": "Name for the AI project resources."
      }
    },
    "aiProjectFriendlyName": {
      "type": "string",
      "defaultValue": "Agents Project resource",
      "metadata": {
        "description": "Friendly name for your Azure AI resource"
      }
    },
    "aiProjectDescription": {
      "type": "string",
      "defaultValue": "This is an example AI Project resource for use in Azure AI Studio.",
      "metadata": {
        "description": "Creating an Azure AI project under your Hub creates an endpoint for your app to call, and sets up app services to access to resources in your tenant."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region used for the deployment of all resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Set of tags to apply to all resources."
      }
    },
    "aiSearchName": {
      "type": "string",
      "defaultValue": "agent-ai-search",
      "metadata": {
        "description": "Name of the Azure AI Search account"
      }
    },
    "capabilityHostName": {
      "type": "string",
      "defaultValue": "caphost1",
      "metadata": {
        "description": "Name for capabilityHost."
      }
    },
    "storageName": {
      "type": "string",
      "defaultValue": "agent-storage",
      "metadata": {
        "description": "Name of the storage account"
      }
    },
    "aiServicesName": {
      "type": "string",
      "defaultValue": "agent-ai-services",
      "metadata": {
        "description": "Name of the Azure AI Services account"
      }
    },
    "modelName": {
      "type": "string",
      "defaultValue": "gpt-4o",
      "metadata": {
        "description": "Model name for deployment"
      }
    },
    "modelFormat": {
      "type": "string",
      "defaultValue": "OpenAI",
      "metadata": {
        "description": "Model format for deployment"
      }
    },
    "modelVersion": {
      "type": "string",
      "defaultValue": "2024-08-06",
      "metadata": {
        "description": "Model version for deployment"
      }
    },
    "modelSkuName": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "metadata": {
        "description": "Model deployment SKU name"
      }
    },
    "modelCapacity": {
      "type": "int",
      "defaultValue": 50,
      "metadata": {
        "description": "Model deployment capacity"
      }
    },
    "modelLocation": {
      "type": "string",
      "defaultValue": "westus",
      "metadata": {
        "description": "Model deployment location. If you want to deploy an Azure AI resource/model in different location than the rest of the resources created."
      }
    },
    "aiServiceKind": {
      "type": "string",
      "defaultValue": "AIServices",
      "metadata": {
        "description": "AI Service Account kind: either AzureOpenAI or AIServices"
      }
    },
    "aiServiceAccountResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The AI Service Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "aiSearchServiceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Ai Search Service full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "aiStorageAccountResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Ai Storage Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "cosmosDBResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Cosmos DB Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "cosmosDBName": {
      "type": "string",
      "defaultValue": "agent-thread-storage"
    },
    "deploymentTimestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddHHmmss')]"
    }
  },
  "variables": {
    "name": "[toLower(format('{0}', parameters('aiHubName')))]",
    "projectName": "[toLower(format('{0}', parameters('aiProjectName')))]",
    "uniqueSuffix": "[substring(uniqueString(format('{0}-{1}', resourceGroup().id, parameters('deploymentTimestamp'))), 0, 4)]",
    "aiServiceExists": "[not(equals(parameters('aiServiceAccountResourceId'), ''))]",
    "acsExists": "[not(equals(parameters('aiSearchServiceResourceId'), ''))]",
    "cosmosExists": "[not(equals(parameters('cosmosDBResourceId'), ''))]",
    "aiServiceParts": "[split(parameters('aiServiceAccountResourceId'), '/')]",
    "aiServiceAccountSubscriptionId": "[if(variables('aiServiceExists'), variables('aiServiceParts')[2], subscription().subscriptionId)]",
    "aiServiceAccountResourceGroupName": "[if(variables('aiServiceExists'), variables('aiServiceParts')[4], resourceGroup().name)]",
    "acsParts": "[split(parameters('aiSearchServiceResourceId'), '/')]",
    "aiSearchServiceSubscriptionId": "[if(variables('acsExists'), variables('acsParts')[2], subscription().subscriptionId)]",
    "aiSearchServiceResourceGroupName": "[if(variables('acsExists'), variables('acsParts')[4], resourceGroup().name)]",
    "cosmosParts": "[split(parameters('cosmosDBResourceId'), '/')]",
    "cosmosDBSubscriptionId": "[if(variables('cosmosExists'), variables('cosmosParts')[2], subscription().subscriptionId)]",
    "cosmosDBResourceGroupName": "[if(variables('cosmosExists'), variables('cosmosParts')[4], resourceGroup().name)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('validate-existing-resources-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiServiceAccountResourceId": {
            "value": "[parameters('aiServiceAccountResourceId')]"
          },
          "aiSearchServiceResourceId": {
            "value": "[parameters('aiSearchServiceResourceId')]"
          },
          "aiStorageAccountResourceId": {
            "value": "[parameters('aiStorageAccountResourceId')]"
          },
          "cosmosDBResourceId": {
            "value": "[parameters('cosmosDBResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "10392990986234847358"
            }
          },
          "parameters": {
            "aiServiceAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Service Account. "
              }
            },
            "aiSearchServiceResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the Azure AI Search Service."
              }
            },
            "aiStorageAccountResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the Azure Storage Account."
              }
            },
            "cosmosDBResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "ResourceId of Cosmos DB Account"
              }
            }
          },
          "variables": {
            "storagePassedIn": "[not(equals(parameters('aiStorageAccountResourceId'), ''))]",
            "aiServicesPassedIn": "[not(equals(parameters('aiServiceAccountResourceId'), ''))]",
            "searchPassedIn": "[not(equals(parameters('aiSearchServiceResourceId'), ''))]",
            "cosmosPassedIn": "[not(equals(parameters('cosmosDBResourceId'), ''))]",
            "aiServiceParts": "[split(parameters('aiServiceAccountResourceId'), '/')]",
            "aiServiceAccountSubscriptionId": "[if(variables('aiServicesPassedIn'), variables('aiServiceParts')[2], subscription().subscriptionId)]",
            "aiServiceAccountResourceGroupName": "[if(variables('aiServicesPassedIn'), variables('aiServiceParts')[4], resourceGroup().name)]",
            "acsParts": "[split(parameters('aiSearchServiceResourceId'), '/')]",
            "aiSearchServiceSubscriptionId": "[if(variables('searchPassedIn'), variables('acsParts')[2], subscription().subscriptionId)]",
            "aiSearchServiceResourceGroupName": "[if(variables('searchPassedIn'), variables('acsParts')[4], resourceGroup().name)]",
            "cosmosParts": "[split(parameters('cosmosDBResourceId'), '/')]",
            "cosmosDBSubscriptionId": "[if(variables('cosmosPassedIn'), variables('cosmosParts')[2], subscription().subscriptionId)]",
            "cosmosDBResourceGroupName": "[if(variables('cosmosPassedIn'), variables('cosmosParts')[4], resourceGroup().name)]",
            "storageParts": "[split(parameters('aiStorageAccountResourceId'), '/')]",
            "azureStorageSubscriptionId": "[if(variables('storagePassedIn'), variables('storageParts')[2], subscription().subscriptionId)]",
            "azureStorageResourceGroupName": "[if(variables('storagePassedIn'), variables('storageParts')[4], resourceGroup().name)]"
          },
          "resources": [],
          "outputs": {
            "aiServiceExists": {
              "type": "bool",
              "value": "[and(variables('aiServicesPassedIn'), equals(last(split(parameters('aiServiceAccountResourceId'), '/')), variables('aiServiceParts')[8]))]"
            },
            "aiSearchExists": {
              "type": "bool",
              "value": "[and(variables('searchPassedIn'), equals(last(split(parameters('aiSearchServiceResourceId'), '/')), variables('acsParts')[8]))]"
            },
            "cosmosDBExists": {
              "type": "bool",
              "value": "[and(variables('cosmosPassedIn'), equals(last(split(parameters('cosmosDBResourceId'), '/')), variables('cosmosParts')[8]))]"
            },
            "aiStorageExists": {
              "type": "bool",
              "value": "[and(variables('storagePassedIn'), equals(variables('storageParts')[8], variables('storageParts')[8]))]"
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string",
              "value": "[variables('aiSearchServiceSubscriptionId')]"
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string",
              "value": "[variables('aiSearchServiceResourceGroupName')]"
            },
            "cosmosDBSubscriptionId": {
              "type": "string",
              "value": "[variables('cosmosDBSubscriptionId')]"
            },
            "cosmosDBResourceGroupName": {
              "type": "string",
              "value": "[variables('cosmosDBResourceGroupName')]"
            },
            "aiServiceAccountSubscriptionId": {
              "type": "string",
              "value": "[variables('aiServiceAccountSubscriptionId')]"
            },
            "aiServiceAccountResourceGroupName": {
              "type": "string",
              "value": "[variables('aiServiceAccountResourceGroupName')]"
            },
            "azureStorageSubscriptionId": {
              "type": "string",
              "value": "[variables('azureStorageSubscriptionId')]"
            },
            "azureStorageResourceGroupName": {
              "type": "string",
              "value": "[variables('azureStorageResourceGroupName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageName": {
            "value": "[format('{0}{1}', parameters('storageName'), variables('uniqueSuffix'))]"
          },
          "keyvaultName": {
            "value": "[format('kv-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
          },
          "aiServicesName": {
            "value": "[format('{0}{1}', parameters('aiServicesName'), variables('uniqueSuffix'))]"
          },
          "aiSearchName": {
            "value": "[format('{0}-{1}', parameters('aiSearchName'), variables('uniqueSuffix'))]"
          },
          "cosmosDBName": {
            "value": "[format('{0}-{1}', parameters('cosmosDBName'), variables('uniqueSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "modelName": {
            "value": "[parameters('modelName')]"
          },
          "modelFormat": {
            "value": "[parameters('modelFormat')]"
          },
          "modelVersion": {
            "value": "[parameters('modelVersion')]"
          },
          "modelSkuName": {
            "value": "[parameters('modelSkuName')]"
          },
          "modelCapacity": {
            "value": "[parameters('modelCapacity')]"
          },
          "modelLocation": {
            "value": "[parameters('modelLocation')]"
          },
          "aiServiceAccountResourceId": {
            "value": "[parameters('aiServiceAccountResourceId')]"
          },
          "aiServiceExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServiceExists.value]"
          },
          "aiSearchServiceResourceId": {
            "value": "[parameters('aiSearchServiceResourceId')]"
          },
          "aiSearchExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchExists.value]"
          },
          "aiStorageAccountResourceId": {
            "value": "[parameters('aiStorageAccountResourceId')]"
          },
          "aiStorageExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiStorageExists.value]"
          },
          "cosmosDBResourceId": {
            "value": "[parameters('cosmosDBResourceId')]"
          },
          "cosmosDBExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBExists.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "5844917055965347815"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to add to the resources"
              }
            },
            "aiServicesName": {
              "type": "string",
              "metadata": {
                "description": "AI services name"
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "The name of the AI Search resource"
              }
            },
            "storageName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account"
              }
            },
            "cosmosDBName": {
              "type": "string"
            },
            "modelName": {
              "type": "string",
              "metadata": {
                "description": "Model name for deployment"
              }
            },
            "modelFormat": {
              "type": "string",
              "metadata": {
                "description": "Model format for deployment"
              }
            },
            "modelVersion": {
              "type": "string",
              "metadata": {
                "description": "Model version for deployment"
              }
            },
            "modelSkuName": {
              "type": "string",
              "metadata": {
                "description": "Model deployment SKU name"
              }
            },
            "modelCapacity": {
              "type": "int",
              "metadata": {
                "description": "Model deployment capacity"
              }
            },
            "modelLocation": {
              "type": "string",
              "metadata": {
                "description": "Model/AI Resource deployment location"
              }
            },
            "aiServiceAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "The AI Service Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "aiSearchServiceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The AI Search Service full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "aiStorageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "The AI Storage Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "cosmosDBResourceId": {
              "type": "string",
              "metadata": {
                "description": "The Cosmos DB Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "aiServiceExists": {
              "type": "bool"
            },
            "aiSearchExists": {
              "type": "bool"
            },
            "aiStorageExists": {
              "type": "bool"
            },
            "cosmosDBExists": {
              "type": "bool"
            },
            "noZRSRegions": {
              "type": "array",
              "defaultValue": [
                "southindia",
                "westus"
              ]
            },
            "sku": {
              "type": "object",
              "defaultValue": "[if(contains(parameters('noZRSRegions'), parameters('location')), createObject('name', 'Standard_GRS'), createObject('name', 'Standard_ZRS'))]"
            }
          },
          "variables": {
            "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
            "cosmosParts": "[split(parameters('cosmosDBResourceId'), '/')]",
            "canaryRegions": [
              "eastus2euap",
              "centraluseuap"
            ],
            "cosmosDbRegion": "[if(contains(variables('canaryRegions'), parameters('location')), 'westus', parameters('location'))]",
            "aiServiceParts": "[split(parameters('aiServiceAccountResourceId'), '/')]",
            "acsParts": "[split(parameters('aiSearchServiceResourceId'), '/')]",
            "aiStorageParts": "[split(parameters('aiStorageAccountResourceId'), '/')]"
          },
          "resources": [
            {
              "condition": "[not(parameters('cosmosDBExists'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-12-01-preview",
              "name": "[parameters('cosmosDBName')]",
              "location": "[variables('cosmosDbRegion')]",
              "tags": "[parameters('tags')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "disableLocalAuth": true,
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "enableFreeTier": false,
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyvaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "createMode": "default",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableSoftDelete": true,
                "enableRbacAuthorization": true,
                "enablePurgeProtection": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny"
                },
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "condition": "[not(parameters('aiServiceExists'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('aiServicesName')]",
              "location": "[parameters('modelLocation')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "customSubDomainName": "[toLower(format('{0}', parameters('aiServicesName')))]",
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "condition": "[not(parameters('aiServiceExists'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('modelName'))]",
              "sku": {
                "capacity": "[parameters('modelCapacity')]",
                "name": "[parameters('modelSkuName')]"
              },
              "properties": {
                "model": {
                  "name": "[parameters('modelName')]",
                  "format": "[parameters('modelFormat')]",
                  "version": "[parameters('modelVersion')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
              ]
            },
            {
              "condition": "[not(parameters('aiSearchExists'))]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-06-01-preview",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "disableLocalAuth": false,
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "hostingMode": "default",
                "partitionCount": 1,
                "publicNetworkAccess": "enabled",
                "replicaCount": 1,
                "semanticSearch": "disabled"
              },
              "sku": {
                "name": "standard"
              }
            },
            {
              "condition": "[not(parameters('aiStorageExists'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[variables('storageNameCleaned')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": "[parameters('sku')]",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "publicNetworkAccess": "Enabled",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow",
                  "virtualNetworkRules": []
                },
                "allowSharedKeyAccess": false
              }
            }
          ],
          "outputs": {
            "aiServicesName": {
              "type": "string",
              "value": "[if(parameters('aiServiceExists'), variables('aiServiceParts')[8], parameters('aiServicesName'))]"
            },
            "aiservicesID": {
              "type": "string",
              "value": "[if(parameters('aiServiceExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('aiServiceParts')[2], variables('aiServiceParts')[4]), 'Microsoft.CognitiveServices/accounts', variables('aiServiceParts')[8]), resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')))]"
            },
            "aiservicesTarget": {
              "type": "string",
              "value": "[if(parameters('aiServiceExists'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('aiServiceParts')[2], variables('aiServiceParts')[4]), 'Microsoft.CognitiveServices/accounts', variables('aiServiceParts')[8]), '2024-10-01').endpoint, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoint)]"
            },
            "aiServiceAccountResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('aiServiceExists'), variables('aiServiceParts')[4], resourceGroup().name)]"
            },
            "aiServiceAccountSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('aiServiceExists'), variables('aiServiceParts')[2], subscription().subscriptionId)]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), variables('acsParts')[8], parameters('aiSearchName'))]"
            },
            "aisearchID": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('acsParts')[2], variables('acsParts')[4]), 'Microsoft.Search/searchServices', variables('acsParts')[8]), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]"
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), variables('acsParts')[4], resourceGroup().name)]"
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), variables('acsParts')[2], subscription().subscriptionId)]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(parameters('aiStorageExists'), variables('aiStorageParts')[8], variables('storageNameCleaned'))]"
            },
            "storageId": {
              "type": "string",
              "value": "[if(parameters('aiStorageExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('aiStorageParts')[2], variables('aiStorageParts')[4]), 'Microsoft.Storage/storageAccounts', variables('aiStorageParts')[8]), resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned')))]"
            },
            "storageAccountResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('aiStorageExists'), variables('aiStorageParts')[4], resourceGroup().name)]"
            },
            "storageAccountSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('aiStorageExists'), variables('aiStorageParts')[2], subscription().subscriptionId)]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), variables('cosmosParts')[8], parameters('cosmosDBName'))]"
            },
            "cosmosDBId": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosParts')[2], variables('cosmosParts')[4]), 'Microsoft.DocumentDB/databaseAccounts', variables('cosmosParts')[8]), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')))]"
            },
            "cosmosDBResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), variables('cosmosParts')[4], resourceGroup().name)]"
            },
            "cosmosDBSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), variables('cosmosParts')[2], subscription().subscriptionId)]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiHubName": {
            "value": "[format('{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
          },
          "aiHubFriendlyName": {
            "value": "[parameters('aiHubFriendlyName')]"
          },
          "aiHubDescription": {
            "value": "[parameters('aiHubDescription')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchName.value]"
          },
          "aiSearchId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aisearchID.value]"
          },
          "aiSearchServiceResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchServiceResourceGroupName.value]"
          },
          "aiSearchServiceSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchServiceSubscriptionId.value]"
          },
          "aiServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesName.value]"
          },
          "aiServiceKind": {
            "value": "[parameters('aiServiceKind')]"
          },
          "aiServicesId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiservicesID.value]"
          },
          "aiServicesTarget": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiservicesTarget.value]"
          },
          "aiServiceAccountResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServiceAccountResourceGroupName.value]"
          },
          "aiServiceAccountSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServiceAccountSubscriptionId.value]"
          },
          "keyVaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.keyvaultId.value]"
          },
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "10108960257155829972"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Tags to add to the resources"
              }
            },
            "aiHubName": {
              "type": "string",
              "metadata": {
                "description": "AI hub name"
              }
            },
            "aiHubFriendlyName": {
              "type": "string",
              "defaultValue": "[parameters('aiHubName')]",
              "metadata": {
                "description": "AI hub display name"
              }
            },
            "aiHubDescription": {
              "type": "string",
              "metadata": {
                "description": "AI hub description"
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the key vault resource for storing connection strings"
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the storage account resource for storing experimentation outputs"
              }
            },
            "aiServicesId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Services resource"
              }
            },
            "aiServicesTarget": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Services endpoint"
              }
            },
            "aiServicesName": {
              "type": "string",
              "metadata": {
                "description": "Name AI Services resource"
              }
            },
            "aiServiceAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name of the AI Services resource"
              }
            },
            "aiServiceAccountSubscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the AI Services resource"
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name AI Search resource"
              }
            },
            "aiSearchId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Search resource"
              }
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name of the AI Search resource"
              }
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the AI Search resource"
              }
            },
            "aiServiceKind": {
              "type": "string",
              "metadata": {
                "description": "AI Service Account kind: either OpenAI or AIServices"
              }
            }
          },
          "variables": {
            "acsConnectionName": "[format('{0}-connection-AISearch', parameters('aiHubName'))]",
            "aoaiConnection": "[format('{0}-connection-AIServices_aoai', parameters('aiHubName'))]",
            "kindAIServicesExists": "[equals(parameters('aiServiceKind'), 'AIServices')]",
            "aiServiceConnectionName": "[if(variables('kindAIServicesExists'), format('{0}-connection-AIServices', parameters('aiHubName')), variables('aoaiConnection'))]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('aiHubName'), variables('aiServiceConnectionName'))]",
              "properties": {
                "category": "[parameters('aiServiceKind')]",
                "target": "[parameters('aiServicesTarget')]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[parameters('aiServicesId')]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiServiceAccountSubscriptionId'), parameters('aiServiceAccountResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('aiHubName'), variables('acsConnectionName'))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[parameters('aiSearchId')]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchServiceSubscriptionId'), parameters('aiSearchServiceResourceGroupName')), 'Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-06-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('aiHubName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('aiHubFriendlyName')]",
                "description": "[parameters('aiHubDescription')]",
                "keyVault": "[parameters('keyVaultId')]",
                "storageAccount": "[parameters('storageAccountId')]",
                "systemDatastoresAuthMode": "identity"
              },
              "kind": "hub"
            }
          ],
          "outputs": {
            "aiHubID": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName'))]"
            },
            "aiHubName": {
              "type": "string",
              "value": "[parameters('aiHubName')]"
            },
            "aoaiConnectionName": {
              "type": "string",
              "value": "[variables('aoaiConnection')]"
            },
            "acsConnectionName": {
              "type": "string",
              "value": "[variables('acsConnectionName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiProjectName": {
            "value": "[format('{0}-{1}', variables('projectName'), variables('uniqueSuffix'))]"
          },
          "aiProjectFriendlyName": {
            "value": "[parameters('aiProjectFriendlyName')]"
          },
          "aiProjectDescription": {
            "value": "[parameters('aiProjectDescription')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "aiHubId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiHubID.value]"
          },
          "cosmosDBName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "cosmosDBSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBSubscriptionId.value]"
          },
          "cosmosDBResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBResourceGroupName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17785875270341448315"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Tags to add to the resources"
              }
            },
            "aiProjectName": {
              "type": "string",
              "metadata": {
                "description": "AI Project name"
              }
            },
            "aiProjectFriendlyName": {
              "type": "string",
              "defaultValue": "[parameters('aiProjectName')]",
              "metadata": {
                "description": "AI Project display name"
              }
            },
            "aiProjectDescription": {
              "type": "string",
              "metadata": {
                "description": "AI Project description"
              }
            },
            "aiHubId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Hub resource"
              }
            },
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "The name of the CosmosDB account"
              }
            },
            "cosmosDBSubscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the Cosmos DB resource"
              }
            },
            "cosmosDBResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name of the Cosmos DB resource"
              }
            }
          },
          "variables": {
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroupName": "[resourceGroup().name]",
            "projectConnectionString": "[format('{0}.api.azureml.ms;{1};{2};{3}', parameters('location'), variables('subscriptionId'), variables('resourceGroupName'), parameters('aiProjectName'))]",
            "cosmosConnectionName": "[format('{0}-connection-CosmosDBAccount', parameters('aiProjectName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('aiProjectName')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('ProjectConnectionString', variables('projectConnectionString')))]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('aiProjectFriendlyName')]",
                "description": "[parameters('aiProjectDescription')]",
                "hubResourceId": "[parameters('aiHubId')]"
              },
              "kind": "project"
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2025-01-01-preview",
              "name": "[format('{0}/{1}', parameters('aiProjectName'), variables('cosmosConnectionName'))]",
              "properties": {
                "category": "CosmosDB",
                "target": "[format('https://{0}.documents.azure.com:443/', parameters('cosmosDBName'))]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')), '2024-12-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiProjectName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosConnectionName": {
              "type": "string",
              "value": "[variables('cosmosConnectionName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[parameters('aiProjectName')]"
            },
            "aiProjectResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiProjectName'))]"
            },
            "aiProjectPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiProjectName')), '2024-10-01-preview', 'full').identity.principalId]"
            },
            "aiProjectWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiProjectName')), '2024-10-01-preview').workspaceId]"
            },
            "projectConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiProjectName')), '2024-10-01-preview', 'full').tags.ProjectConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ai-service-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('aiServiceAccountSubscriptionId')]",
      "resourceGroup": "[variables('aiServiceAccountResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesName.value]"
          },
          "aiProjectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectPrincipalId.value]"
          },
          "aiProjectId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "8273307596853107787"
            }
          },
          "parameters": {
            "aiServicesName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Services resource"
              }
            },
            "aiProjectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI project"
              }
            },
            "aiProjectId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI project"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68'), parameters('aiProjectId'))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(parameters('aiProjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'), resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(parameters('aiProjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908'), resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ai-search-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('aiSearchServiceSubscriptionId')]",
      "resourceGroup": "[variables('aiSearchServiceResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchName.value]"
          },
          "aiProjectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectPrincipalId.value]"
          },
          "aiProjectId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13082605048606812458"
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource"
              }
            },
            "aiProjectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI project"
              }
            },
            "aiProjectId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI project"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(parameters('aiProjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(parameters('aiProjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmos-ac-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('cosmosDBSubscriptionId')]",
      "resourceGroup": "[variables('cosmosDBResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "aiProjectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectPrincipalId.value]"
          },
          "projectWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17725763585430388696"
            }
          },
          "parameters": {
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource"
              }
            },
            "aiProjectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI project"
              }
            },
            "projectWorkspaceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDBName'))]",
              "name": "[guid(parameters('projectWorkspaceId'), resourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('capabilityHost-configuration--{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "capabilityHostName": {
            "value": "[format('{0}-{1}', variables('uniqueSuffix'), parameters('capabilityHostName'))]"
          },
          "aiHubName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiHubName.value]"
          },
          "aiProjectName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectName.value]"
          },
          "acsConnectionName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.acsConnectionName.value]"
          },
          "aoaiConnectionName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aoaiConnectionName.value]"
          },
          "cosmosConnectionName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosConnectionName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12191138155587807529"
            }
          },
          "parameters": {
            "aiHubName": {
              "type": "string",
              "metadata": {
                "description": "AI hub name"
              }
            },
            "aiProjectName": {
              "type": "string",
              "metadata": {
                "description": "AI project name"
              }
            },
            "acsConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Name for ACS connection."
              }
            },
            "aoaiConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Name for ACS connection."
              }
            },
            "capabilityHostName": {
              "type": "string",
              "metadata": {
                "description": "Name for capabilityHost."
              }
            },
            "cosmosConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Name for CosmosDB connection."
              }
            }
          },
          "variables": {
            "storageConnections": [
              "[format('{0}/workspaceblobstore', parameters('aiProjectName'))]"
            ],
            "aiSearchConnection": [
              "[format('{0}', parameters('acsConnectionName'))]"
            ],
            "aiServiceConnections": [
              "[format('{0}', parameters('aoaiConnectionName'))]"
            ],
            "cosmosDBConnections": [
              "[format('{0}', parameters('cosmosConnectionName'))]"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces/capabilityHosts",
              "apiVersion": "2025-01-01-preview",
              "name": "[format('{0}/{1}', parameters('aiHubName'), format('{0}-{1}', parameters('aiHubName'), parameters('capabilityHostName')))]",
              "properties": {
                "capabilityHostKind": "Agents"
              }
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/capabilityHosts",
              "apiVersion": "2025-01-01-preview",
              "name": "[format('{0}/{1}', parameters('aiProjectName'), format('{0}-{1}', parameters('aiProjectName'), parameters('capabilityHostName')))]",
              "properties": {
                "capabilityHostKind": "Agents",
                "aiServicesConnections": "[variables('aiServiceConnections')]",
                "vectorStoreConnections": "[variables('aiSearchConnection')]",
                "storageConnections": "[variables('storageConnections')]",
                "threadStorageConnections": "[variables('cosmosDBConnections')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/capabilityHosts', parameters('aiHubName'), format('{0}-{1}', parameters('aiHubName'), parameters('capabilityHostName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('aiSearchServiceSubscriptionId'), variables('aiSearchServiceResourceGroupName')), 'Microsoft.Resources/deployments', format('ai-search-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('aiServiceAccountSubscriptionId'), variables('aiServiceAccountResourceGroupName')), 'Microsoft.Resources/deployments', format('ai-service-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosDBSubscriptionId'), variables('cosmosDBResourceGroupName')), 'Microsoft.Resources/deployments', format('cosmos-ac-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmos-ra-{0}-{1}-deployment', toLower(format('{0}', variables('projectName'))), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('cosmosDBSubscriptionId')]",
      "resourceGroup": "[variables('cosmosDBResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "aiProjectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectPrincipalId.value]"
          },
          "aiProjectId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectResourceId.value]"
          },
          "projectWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiProjectWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "580164018367721578"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource"
              }
            },
            "aiProjectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI project"
              }
            },
            "aiProjectId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI project"
              }
            },
            "projectWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "userThreadName": "[format('{0}-thread-message-store', parameters('projectWorkspaceId'))]",
            "systemThreadName": "[format('{0}-system-thread-message-store', parameters('projectWorkspaceId'))]",
            "agentEntityStoreName": "[format('{0}-agent-entity-store', parameters('projectWorkspaceId'))]",
            "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosAccountName'), '00000000-0000-0000-0000-000000000002')]",
            "scopeSystemContainer": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/dbs/enterprise_memory/colls/{3}', subscription().subscriptionId, resourceGroup().name, parameters('cosmosAccountName'), variables('systemThreadName'))]",
            "scopeUserContainer": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/dbs/enterprise_memory/colls/{3}', subscription().subscriptionId, resourceGroup().name, parameters('cosmosAccountName'), variables('userThreadName'))]",
            "scopeAgentEntityContainer": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/dbs/enterprise_memory/colls/{3}', subscription().subscriptionId, resourceGroup().name, parameters('cosmosAccountName'), variables('agentEntityStoreName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(parameters('aiProjectId'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), 'enterprise_memory', variables('userThreadName')), variables('roleDefinitionId')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "scope": "[variables('scopeUserContainer')]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(parameters('aiProjectId'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), 'enterprise_memory', variables('systemThreadName')), variables('roleDefinitionId')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "scope": "[variables('scopeSystemContainer')]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(parameters('aiProjectId'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), 'enterprise_memory', variables('agentEntityStoreName')), variables('roleDefinitionId')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "scope": "[variables('scopeAgentEntityContainer')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('capabilityHost-configuration--{0}-deployment', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "PROJECT_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectConnectionString.value]"
    }
  }
}